
    '''
    #Find all unique aa's
    aaAll = itertools.chain(data[:,0], data[:,1])
    aaSet = list(set(list(aaAll)))
    #a =pd.get_dummies(df, prefix=['aa0', 'aa1'])
    #b = a.values.tolist()
    '''

    #Encode aa's One Hot
    '''s = pd.Series(aaSet)
    aaOneHot = pd.get_dummies(s)
    print(aaSet)
    print(aaOneHot)
    print(aaOneHot[0])


    oneHotData = np.array([])'''

    '''for rowNo in range(len(data)):
        indexOf0 = aaSet.index(data[rowNo][0])
        indexOf1 = aaSet.index(data[rowNo][1])

        #print(str(data[rowNo][0])+", "+str(data[rowNo][1]))
        #print(str(indexOf0)+", "+str(indexOf1))
        #print(data[rowNo])
        #if rowNo==10:
        #   break'''

    '''
    ind1 = anyFeature.index(data[rowNo][0])
        ind2 = anyFeature.index(data[rowNo][1])
        if len(encData) == 0:
            encData = np.array([[newFeatures[ind1], newFeatures[ind2]]])
        else:
            encData = np.append(encData, [[newFeatures[ind1], newFeatures[ind2]]], axis=0)
            # enc.transform(data)




    #print(data)
    #print(data[:,0])
    c = itertools.chain(data[:,0], data[:,1])
    anyFeature = list(set(list(c)))
    #d = data[:,0]+data[:,1]
    #anyFeature = list(set(data[:,0]+data[:,1]))
    #print(anyFeature)
    #list(le.classes_)

    enc = preprocessing.LabelEncoder()
    enc.fit(anyFeature)
    newFeatures = enc.transform(anyFeature)
    print(anyFeature)
    print(list(newFeatures))
    print(data)
    #print(list(enc.classes_))
    encData = np.array([])
    for rowNo in range(len(data)):
        ind1 = anyFeature.index(data[rowNo][0])
        ind2 = anyFeature.index(data[rowNo][1])
        if len(encData)==0:
            encData = np.array([[newFeatures[ind1],newFeatures[ind2]]])
        else:
            encData = np.append(encData, [[newFeatures[ind1],newFeatures[ind2]]],axis = 0)
    #enc.transform(data)

    print(encData)

    clf = SVC(gamma='auto')
    clf.fit(encData, labels)
    #print(list(enc.inverse_transform([1,9])))
    count=0
    for i in range(len(label)):
        if clf.predict([encData[i]]) == [1]:
           count += 1
    print(len(label))
    print(data[0])
    print(encData[0])
    print(clf.predict([encData[0]]))
    #preprocessing.OneHotEncoder()

    s = pd.Series(list('abca'))
    pd.get_dummies(s)

    '''



        # Train and Test Data 80%-20%
    '''cutterIndex = round(8 * len(labels) / 10)
    oneHotDataTrain = oneHotData[:cutterIndex]
    oneHotDataTest = oneHotData[cutterIndex:]
    labelsTrain = labels[:cutterIndex]
    labelsTest = labels[cutterIndex:]
    sizeOfTrain = len(labelsTrain)
    sizeOfTest = len(labelsTest)'''




        # Prediction Statistics
    '''TP = 0
    TN = 0
    FP = 0
    FN = 0
    for rowNo in range(len(labelsTest)):
        if testPredictions[rowNo] == 1:
            if labelsTest[rowNo] == 1:
                TP = TP + 1
            elif labelsTest[rowNo] == 0:
                FP = FP + 1
        elif testPredictions[rowNo] == 0:
            if labelsTest[rowNo] == 1:
                FN = FN + 1
            elif labelsTest[rowNo] == 0:
                TN = TN + 1
    # print(predictions)

    acc = (TP + TN) / (TP + TN + FP + FN)
    precision = (TP) / (TP + FP)
    recall = (TP) / (TP + FN)
    F1 = 2*precision*recall/(precision+recall)
    print("Accuracy:" + str(acc))
    print("Precision:" + str(precision))
    print("Recall:" + str(recall))
    print("F1 Measure:" + str(F1))'''




    '''countOfCorrects = 0
    for i in range(len(labelsTest)):
        if testPredictions[i] == labelsTest[i]:
            countOfCorrects += 1

    predictionAcc = countOfCorrects / sizeOfTest
    print("Prediction Accuracy: " + str(predictionAcc))
    '''


        '''sizeOfTest = len(labelsTest)
    # Calculate Base Accuracy
    countOfLoss = 0
    for row in labelsTest:
        if row == 1:
            countOfLoss += 1
    baseAcc = max(countOfLoss, sizeOfTest - countOfLoss) / sizeOfTest
    print("Base Accuracy: " + str(baseAcc))
    '''



    # Create SVM Model
    clf = SVC(kernel= "linear", C=0.01, gamma='auto')
    clf.fit(oneHotDataTrain, labelsTrain)

    # Predict
    testPredictions = clf.predict(oneHotDataTest)